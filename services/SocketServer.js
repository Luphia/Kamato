/// <reference path="Classes/EasyDB.js" />
/// <reference path="Classes/EasyDB.js" />
/*
	{
		"user": {
			"name": "BOT"
		},
		"message": "Hello World!",
		"eventType":"new message"
	}
 */

var config,
	server,
	secureServer,
    session,
	io,
	logger,
	route,
	db,
	active,
	limit = 20;

var redis = require('socket.io-redis'),
	MongoClient = require('mongodb').MongoClient,
	url = require('url'),
	Result = require('./Classes/Result.js');

var session = require('express-session'),
    RedisStore = require('connect-redis')(session),
    RedisSession,
    socketHandshake = require('socket.io-handshake'),
    cookieParser = require('cookie-parser');

var usernames = {},
	numUsers = 0;

var EasyDB = require('./Classes/EasyDB.js');

var configure = function (_config, _server, _secureServer, _session, _logger, _route) {
    config = _config;
    server = _server;
    secureServer = _secureServer;
    session = _session;
    logger = _logger;
    route = _route;

    RedisSession = new RedisStore(config.get('redis'));
    io = require('socket.io').listen(server);
    io.adapter(redis(config.get('redis')));
    secureServer && (io.listen(secureServer));

    //db = dbconn(config.get('mongo')); //--
    var mongoconfig = config.get('mongo');
    var userConfig = config.get('userConfig');
    var path = mongoconfig.uri;

    db = new EasyDB(userConfig);
    db.connect({ "url": path });
    var path = mongoconfig.uri;
};

var Channel = require('./Classes/Channel.js');

function nsps(socket, chanel) {
    var session = socket.handshake.session;
    console.log(socket.handshake.sessionID);//--
    console.log(session.text);//--
    console.log(session.ip);//--
    console.log(config.get('Mail'));//--

    var cl = new Channel({ channel: chanel, room: 'once', socket: socket, io: io, auto: true }, config.get('Mail'));
    console.log(cl.channel)
    console.log(cl.sID())
    //console.log(cl.watchallroom())
    //cl.changeroom('ffe', function (cb) {
    //    if (cb == true) {
    //        console.log(cl.watchallroom());
    //        console.log(cl.watchoneroom('ffe'));
    //    };
    //})

    //--
    //var a = { Id: 1, body: 'YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXoNCkFCQ0RFRkdISUpLTE1OT1BSUlNUVVZXWFlaDQqkpKTltPq41Q0KMTIzNDU2Nzg5MA0Ko+GieqGwobSht6Gx', kind: 'text1.txt' };
    //cl.FileBOT(a, function (cb) {
    //    console.log(cb);
    //});

    //var b = { Id: 2, body: '', kind: 'text1.png' };
    //cl.FileBOT(b, function (cb) {
    //    console.log(cb);
    //});

    //var d = { Id: 9, body: '中文測試' };
    //cl.EncryptBOT(d, function (cb) {
    //    console.log(cb);
    //});
    //var d = { Id: 9, method: 'SHA1', body: '中文測試' };
    //cl.EncryptBOT(d, function (cb) {
    //    console.log(cb);
    //});
    //var d = {
    //    Id: 10,
    //    title: '中文外部輸入!!!!!!!',
    //    mailto: 'playshowiii@gmail.com',
    //    ccto: 'playshowtw@gmail.com',
    //    content: '<p><b>Hello</b> to myself <img src="cid:note@example.com"/></p>' +
    //    '<p>Here\'s a nyan cat for you as an embedded attachment:<br/><img src="cid:nyan@example.com"/></p>'
    //};

    //cl.MailBOT(d, function (cb) {
    //    console.log('中文測試');
    //});
    //--

    var addedUser = false;
    socket.channel = [];
    // when the client emits 'new message', this listens and executes
    socket.on('new message', function (data) {
        var msg = {
            user: {
                uid: socket.id,
                ip: socket.handshake.address.address,
                name: socket.username
            },
            channel: data.channel,
            message: data,
            timestamp: new Date()
        };

        // we tell the client to execute 'new message'
        socket.broadcast.emit('new message', msg);
        console.log(msg);//--
        log(msg);
        //self.send();
    });

    // get channel history
    socket.on('load message', function (data) {
        var channel = data.channel || 'default';
        var timestamp = new Date(data.timestamp);
        var cond = {};

        if (data.limit) { limit = data.limit; }
        if (data.channel) { cond.channel = data.channel; }
        if (data.timestamp) { cond.timestamp = { $lt: new Date(data.timestamp) }; }

        db.collection('messages').find(cond).sort({ 'timestamp': -1 }).limit(limit).toArray(function (_err, _data) {
            socket.emit('load message', {
                channel: channel,
                messages: _data
            });
        });
    });

    // get channel list
    socket.on('get channel', function (data) {

    });

    // when the client emits 'add user', this listens and executes
    socket.on('add user', function (username) {
        // we store the username in the socket session for this client
        socket.username = username;
        // add the client's username to the global list
        usernames[username] = username;
        ++numUsers;
        addedUser = true;
        socket.emit('login', {
            numUsers: numUsers,
            timestamp: new Date()
        });
        // echo globally (all clients) that a person has connected
        socket.broadcast.emit('user joined', {
            user: {
                name: socket.username
            },
            numUsers: numUsers,
            timestamp: new Date()
        });
    });

    // when the client emits 'typing', we broadcast it to others
    socket.on('typing', function () {
        socket.broadcast.emit('typing', {
            user: {
                name: socket.username
            },
            timestamp: new Date()
        });
    });

    // when the client emits 'stop typing', we broadcast it to others
    socket.on('stop typing', function () {
        socket.broadcast.emit('stop typing', {
            user: {
                name: socket.username
            },
            timestamp: new Date()
        });
    });

    // when the user disconnects.. perform this
    socket.on('disconnect', function () {
        // remove the username from global usernames list
        if (addedUser) {
            delete usernames[socket.username];
            --numUsers;

            // echo globally that this client has left
            socket.broadcast.emit('user left', {
                user: {
                    name: socket.username
                },
                numUsers: numUsers,
                timestamp: new Date()
            });
        }
    });

    // when the user join some channel
    socket.on('join', function (room) {
        socket.join(room);
        socket.channel.indexOf(room) == -1 && socket.channel.push(room);
    });

    // where the user leave some channel
    socket.on('leave', function (room) {
        socket.leave(room);
        socket.channel.splice(socket.channel.indexOf(room), 1);
    });
};

var nsp = [];

function registerNamespace(name) {
    nsp[name] = io.of(name);
    nsp[name].use(socketHandshake({ store: RedisSession, key: 'connect.sid', secret: config.get('server').secret, parser: cookieParser() }));

    nsp[name].on('connection', function (socket) {
        console.log("I am in namespace: " + nsp[name].name);
        nsps(socket, nsp[name].name)
        socket.on('data', function (data) {
            socket.broadcast.emit('data', data);
        });
        socket.on('disconnect', function () {
            console.log("I was in namespace: " + nsp[name].name);
        });
    });
}

var start = function () {
    var self = this;
    var apps = db.listData('app');

    for (var x in apps.list) {
        var name = apps.list[x].name;
        registerNamespace('/' + name);
    };

    //push service
    route.all('/push/', module.exports.pushMessage);
    route.all('/push/:channel', module.exports.pushMessage);

    logger.info.info("Socket start");
    active = true;
};
var log = function (message) {
    !message.channel && (message.channel = 'default');
    db.collection('messages').insert(message, function (_err, _data) { if (_err) logger.exception.error(_err); });
    return true;
};
var send = function (data, channel) {
    if (!data) { return false; }
    if (!active) { return true; }

    var sender = channel ? io.to(channel) : io,
		eventType = data.eventType;

    data.timestamp = new Date();
    data.channel = channel;

    sender.emit(eventType, data);
    log(data);

    return true;
};
var pushMessage = function (req, res, next) {
    res.result = new Result();

    var channel = req.params.channel,
		dist = channel || 'default',
		data = req.body;

    send(data, channel);
    res.result.response(next, 1, 'send message to channel: ' + dist);
};

module.exports = {
    configure: configure,
    start: start,
    send: send,
    pushMessage: pushMessage
}